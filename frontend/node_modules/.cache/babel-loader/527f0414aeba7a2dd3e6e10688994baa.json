{"ast":null,"code":"/* eslint-disable import/no-cycle */\n\n/* eslint-disable no-undef */\n\n/* eslint-disable no-unused-vars */\n\n/* eslint-disable no-param-reassign */\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport authService from 'services/authService';\nimport store from 'state/store';\nimport { addAlert } from 'features/alerts/alertsSlice';\nconst initialState = {\n  status: 'idle',\n  isAuthenticated: false,\n  user: {\n    username: null\n  }\n}; // Thunk functions\n\nconst login = createAsyncThunk('auth/login', async ({\n  username,\n  password,\n  twoFactorAuthToken\n}) => {\n  const {\n    success,\n    error,\n    token,\n    username: _username\n  } = await authService.getAuthToken(username, password, twoFactorAuthToken);\n\n  if (success === false) {\n    store.dispatch(addAlert({\n      message: 'Unsuccesfully logged in user',\n      type: 'DANGER'\n    }));\n  }\n\n  if (success === true) {\n    localStorage.setItem('X-Raya-Token', token);\n    store.dispatch(addAlert({\n      message: 'Succesfully logged in user',\n      type: 'SUCCESS'\n    }));\n  }\n\n  return {\n    isAuthenticated: success,\n    username: _username\n  };\n});\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    reset: {\n      reducer(state) {\n        Object.assign(state, initialState);\n      }\n\n    },\n    logout: {\n      reducer(state) {\n        Object.assign(state, initialState);\n        localStorage.removeItem('X-Raya-Token');\n      }\n\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(login.pending, (state, action) => {\n      state.status = 'loading';\n    }).addCase(login.fulfilled, (state, action) => {\n      const {\n        isAuthenticated,\n        username\n      } = action.payload;\n      state.isAuthenticated = isAuthenticated;\n      state.user.username = username;\n      state.status = 'idle';\n    });\n  }\n});\n\nconst isLoggedIn = state => state.auth.isAuthenticated;\n\nconst getStatus = state => state.auth.status;\n\nconst getAuthToken = () => {\n  const authToken = localStorage.get('X-Raya-Token');\n\n  if (authToken != null) {\n    return true;\n  }\n\n  return false;\n};\n\nexport { isLoggedIn, getStatus, getAuthToken, login }; // Action creators are generated for each case reducer function\n\nexport const {\n  reset,\n  logout\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"sources":["/Users/damianly/Desktop/Raya/Raya-React-DGDash/react-dg-dash/src/features/auth/authSlice.js"],"names":["createSlice","createAsyncThunk","authService","store","addAlert","initialState","status","isAuthenticated","user","username","login","password","twoFactorAuthToken","success","error","token","_username","getAuthToken","dispatch","message","type","localStorage","setItem","authSlice","name","reducers","reset","reducer","state","Object","assign","logout","removeItem","extraReducers","builder","addCase","pending","action","fulfilled","payload","isLoggedIn","auth","getStatus","authToken","get","actions"],"mappings":"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","sourcesContent":["/* eslint-disable import/no-cycle */\n/* eslint-disable no-undef */\n/* eslint-disable no-unused-vars */\n/* eslint-disable no-param-reassign */\nimport {\n  createSlice,\n  createAsyncThunk,\n} from '@reduxjs/toolkit';\nimport authService from 'services/authService';\nimport store from 'state/store';\nimport { addAlert } from 'features/alerts/alertsSlice';\n\nconst initialState = {\n  status: 'idle',\n  isAuthenticated: false,\n  user: {\n    username: null,\n  },\n};\n\n// Thunk functions\nconst login = createAsyncThunk('auth/login', async ({ username, password, twoFactorAuthToken }) => {\n  const {\n    success,\n    error,\n    token,\n    username: _username,\n  } = await authService.getAuthToken(username, password, twoFactorAuthToken);\n\n  if (success === false) {\n    store.dispatch(addAlert({\n      message: 'Unsuccesfully logged in user',\n      type: 'DANGER',\n    }));\n  }\n  if (success === true) {\n    localStorage.setItem('X-Raya-Token', token);\n    store.dispatch(addAlert({\n      message: 'Succesfully logged in user',\n      type: 'SUCCESS',\n    }));\n  }\n\n  return {\n    isAuthenticated: success,\n    username: _username,\n  };\n});\n\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    reset: {\n      reducer(state) {\n        Object.assign(state, initialState);\n      },\n    },\n    logout: {\n      reducer(state) {\n        Object.assign(state, initialState);\n        localStorage.removeItem('X-Raya-Token');\n      },\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(login.pending, (state, action) => {\n        state.status = 'loading';\n      })\n      .addCase(login.fulfilled, (state, action) => {\n        const {\n          isAuthenticated,\n          username,\n        } = action.payload;\n\n        state.isAuthenticated = isAuthenticated;\n        state.user.username = username;\n        state.status = 'idle';\n      });\n  },\n});\n\nconst isLoggedIn = (state) => state.auth.isAuthenticated;\nconst getStatus = (state) => state.auth.status;\n\nconst getAuthToken = () => {\n  const authToken = localStorage.get('X-Raya-Token');\n  if (authToken != null) {\n    return true;\n  }\n  return false;\n};\n\nexport {\n  isLoggedIn,\n  getStatus,\n  getAuthToken,\n  login,\n};\n\n// Action creators are generated for each case reducer function\nexport const {\n  reset,\n  logout,\n} = authSlice.actions;\n\nexport default authSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}