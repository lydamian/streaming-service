{"ast":null,"code":"/* eslint-disable no-undef */\n\n/* eslint-disable no-unused-vars */\n\n/* eslint-disable no-param-reassign */\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { useSelector, useDispatch } from 'react-redux';\nimport authService from 'services/authService';\nconst initialState = {\n  status: 'idle',\n  token: null,\n  user: {\n    username: null\n  }\n}; // Thunk functions\n\nconst login = createAsyncThunk('auth/login', async ({\n  username,\n  password,\n  twoFactorAuthToken\n}) => {\n  console.log(`[authSlice] login: ${{\n    username,\n    password,\n    twoFactorAuthToken\n  }}`);\n  const {\n    success,\n    error,\n    token,\n    username: _username\n  } = await authService.getAuthToken(username, password, twoFactorAuthToken);\n  console.log('[authSlice] login: getAuthToken response received', {\n    success,\n    error,\n    token,\n    _username\n  });\n\n  if (success === false) {\n    console.log(`failed to login user ${error}`);\n    alert('failed to login user');\n  }\n\n  if (success === true) {\n    localStorage.setItem('X-Raya-Token', token);\n    alert('successfully logged in user');\n  }\n\n  return {\n    token,\n    username: _username\n  };\n});\nconst logout = createAsyncThunk('auth/logout', async () => {\n  console.log(`[authSlice] logout: ${{\n    username,\n    password,\n    twoFactorAuthToken\n  }}`);\n  localStorage.removeItem('X-Raya-Token');\n});\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    reset: {\n      reducer(state, action) {\n        state = initialState;\n      }\n\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(login.pending, (state, action) => {\n      state.status = 'loading';\n    }).addCase(login.fulfilled, (state, action) => {\n      const {\n        token,\n        username\n      } = action.payload;\n      state.token = token;\n      state.user.username = username;\n      state.status = 'idle';\n    }).addCase(logout.pending, (state, action) => {\n      state.status = 'loading';\n    }).addCase(logout.fulfilled, (state, action) => {\n      state.status = initialState;\n    });\n  }\n});\n\nconst isLoggedIn = () => {\n  const authToken = localStorage.get('X-Raya-Token');\n\n  if (authToken != null) {\n    return true;\n  }\n\n  return false;\n};\n\nexport { isLoggedIn, login, logout }; // Action creators are generated for each case reducer function\n\nexport const {\n  reset\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"sources":["/Users/damianly/Desktop/Raya/Raya-React-DGDash/react-dg-dash/src/state-management/slices/authSlice.js"],"names":["createSlice","createAsyncThunk","useSelector","useDispatch","authService","initialState","status","token","user","username","login","password","twoFactorAuthToken","console","log","success","error","_username","getAuthToken","alert","localStorage","setItem","logout","removeItem","authSlice","name","reducers","reset","reducer","state","action","extraReducers","builder","addCase","pending","fulfilled","payload","isLoggedIn","authToken","get","actions"],"mappings":"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","sourcesContent":["/* eslint-disable no-undef */\n/* eslint-disable no-unused-vars */\n/* eslint-disable no-param-reassign */\nimport {\n  createSlice,\n  createAsyncThunk,\n} from '@reduxjs/toolkit';\nimport { useSelector, useDispatch } from 'react-redux';\nimport authService from 'services/authService';\n\nconst initialState = {\n  status: 'idle',\n  token: null,\n  user: {\n    username: null,\n  },\n};\n\n// Thunk functions\nconst login = createAsyncThunk('auth/login', async ({ username, password, twoFactorAuthToken }) => {\n  console.log(`[authSlice] login: ${{ username, password, twoFactorAuthToken }}`);\n\n  const {\n    success,\n    error,\n    token,\n    username: _username,\n  } = await authService.getAuthToken(username, password, twoFactorAuthToken);\n  console.log('[authSlice] login: getAuthToken response received', {\n    success, error, token, _username,\n  });\n\n  if (success === false) {\n    console.log(`failed to login user ${error}`);\n    alert('failed to login user');\n  }\n  if (success === true) {\n    localStorage.setItem('X-Raya-Token', token);\n    alert('successfully logged in user');\n  }\n\n  return {\n    token,\n    username: _username,\n  };\n});\n\nconst logout = createAsyncThunk('auth/logout', async () => {\n  console.log(`[authSlice] logout: ${{ username, password, twoFactorAuthToken }}`);\n  localStorage.removeItem('X-Raya-Token');\n});\n\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    reset: {\n      reducer(state, action) {\n        state = initialState;\n      },\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(login.pending, (state, action) => {\n        state.status = 'loading';\n      })\n      .addCase(login.fulfilled, (state, action) => {\n        const {\n          token,\n          username,\n        } = action.payload;\n\n        state.token = token;\n        state.user.username = username;\n        state.status = 'idle';\n      })\n      .addCase(logout.pending, (state, action) => {\n        state.status = 'loading';\n      })\n      .addCase(logout.fulfilled, (state, action) => {\n        state.status = initialState;\n      });\n  },\n});\n\nconst isLoggedIn = () => {\n  const authToken = localStorage.get('X-Raya-Token');\n  if (authToken != null) {\n    return true;\n  }\n  return false;\n};\n\nexport {\n  isLoggedIn,\n  login,\n  logout,\n};\n\n// Action creators are generated for each case reducer function\nexport const {\n  reset,\n} = authSlice.actions;\n\nexport default authSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}