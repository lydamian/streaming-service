{"ast":null,"code":"var _s = $RefreshSig$();\n\n/* eslint-disable no-undef */\n\n/* eslint-disable no-unused-vars */\n\n/* eslint-disable no-param-reassign */\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { useSelector, useDispatch } from 'react-redux';\nimport authService from 'services/authService';\nconst initialState = {\n  status: 'idle',\n  token: null,\n  user: {\n    username: null\n  }\n}; // Thunk functions\n\nexport const attemptAuth = createAsyncThunk('auth/attemptAuth', _s(async ({\n  username,\n  password,\n  twoFactorAuthToken\n}) => {\n  _s();\n\n  console.log(`[authSlice] attemptAuth: ${{\n    username,\n    password,\n    twoFactorAuthToken\n  }}`);\n  const dispatch = useDispatch(reset());\n  const {\n    success,\n    error,\n    token,\n    _username\n  } = await authService.getAuthToken(username, password, twoFactorAuthToken);\n  console.log({\n    success,\n    error,\n    token,\n    username\n  });\n\n  if (success === false) {\n    console.log(`failed to login user ${error}`);\n    alert('failed to login user');\n    useDispatch(reset());\n  }\n\n  if (success === true) {\n    localStorage.setItem('X-Raya-Token', token);\n    alert('successfully logged in user');\n  }\n\n  return {\n    token,\n    _username\n  };\n}, \"tyTi/nQX1HrbQgGA5GKcImmUuh4=\", false, function () {\n  return [useDispatch, useDispatch];\n}));\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    reset: {\n      reducer(state, action) {\n        state = initialState;\n      }\n\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(attemptAuth.pending, (state, action) => {\n      state.status = 'loading';\n    }).addCase(attemptAuth.fulfilled, (state, action) => {\n      console.log('state is fulfilled', action.payload);\n      const {\n        token,\n        username\n      } = action.payload;\n      state.token = token;\n      state.user.username = username;\n      state.status = 'idle';\n    });\n  }\n}); // const isAuthenticated = () => {\n// }\n// Action creators are generated for each case reducer function\n\nexport const {\n  reset\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"sources":["/Users/damianly/Desktop/Raya/Raya-React-DGDash/react-dg-dash/src/state-management/slices/authSlice.js"],"names":["createSlice","createAsyncThunk","useSelector","useDispatch","authService","initialState","status","token","user","username","attemptAuth","password","twoFactorAuthToken","console","log","dispatch","reset","success","error","_username","getAuthToken","alert","localStorage","setItem","authSlice","name","reducers","reducer","state","action","extraReducers","builder","addCase","pending","fulfilled","payload","actions"],"mappings":"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","sourcesContent":["/* eslint-disable no-undef */\n/* eslint-disable no-unused-vars */\n/* eslint-disable no-param-reassign */\nimport {\n  createSlice,\n  createAsyncThunk,\n} from '@reduxjs/toolkit';\nimport { useSelector, useDispatch } from 'react-redux';\nimport authService from 'services/authService';\n\nconst initialState = {\n  status: 'idle',\n  token: null,\n  user: {\n    username: null,\n  },\n};\n\n// Thunk functions\nexport const attemptAuth = createAsyncThunk('auth/attemptAuth', async ({ username, password, twoFactorAuthToken }) => {\n  console.log(`[authSlice] attemptAuth: ${{ username, password, twoFactorAuthToken }}`);\n  const dispatch = useDispatch(reset());\n  const {\n    success,\n    error,\n    token,\n    _username,\n  } = await authService.getAuthToken(username, password, twoFactorAuthToken);\n  console.log({\n    success, error, token, username,\n  });\n\n  if (success === false) {\n    console.log(`failed to login user ${error}`);\n    alert('failed to login user');\n    useDispatch(reset());\n  }\n  if (success === true) {\n    localStorage.setItem('X-Raya-Token', token);\n    alert('successfully logged in user');\n  }\n\n  return {\n    token,\n    _username,\n  };\n});\n\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    reset: {\n      reducer(state, action) {\n        state = initialState;\n      },\n    },\n  }, \n  extraReducers: (builder) => {\n    builder\n      .addCase(attemptAuth.pending, (state, action) => {\n        state.status = 'loading';\n      })\n      .addCase(attemptAuth.fulfilled, (state, action) => {\n        console.log('state is fulfilled', action.payload);\n        const {\n          token,\n          username,\n        } = action.payload;\n\n        state.token = token;\n        state.user.username = username;\n        state.status = 'idle';\n      });\n  },\n});\n\n// const isAuthenticated = () => {\n\n// }\n\n// Action creators are generated for each case reducer function\nexport const {\n  reset,\n} = authSlice.actions;\n\nexport default authSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}