{"ast":null,"code":"/* eslint-disable no-unused-vars */\n\n/* eslint-disable no-param-reassign */\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport authService from 'services/authService';\nconst initialState = {\n  status: 'idle',\n  token: null,\n  user: {\n    username: null\n  }\n}; // Thunk functions\n\nexport const attemptAuth = createAsyncThunk('auth/attemptAuth', async ({\n  _username,\n  password,\n  twoFactorAuthToken\n}) => {\n  console.log(`[authSlice] attemptAuth: ${{\n    _username,\n    password,\n    twoFactorAuthToken\n  }}`);\n  const {\n    success,\n    error,\n    token,\n    username\n  } = await authService.getAuthToken(_username, password, twoFactorAuthToken);\n\n  if (success === false) {\n    console.log(`failed to login user ${error}`);\n  }\n\n  return {\n    token: null,\n    username: null\n  };\n});\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(attemptAuth.pending, (state, action) => {\n      state.status = 'loading';\n    }).addCase(attemptAuth.fulfilled, (state, action) => {\n      const {\n        token,\n        username\n      } = action.payload;\n      state.token = token;\n      state.user.username = username;\n      state.status = 'idle';\n    });\n  }\n}); // const isAuthenticated = () => {\n// }\n// Action creators are generated for each case reducer function\n// export const { updateAuthState } = authSlice.actions;\n\nexport default authSlice.reducer;","map":{"version":3,"sources":["/Users/damianly/Desktop/Raya/Raya-React-DGDash/react-dg-dash/src/state-management/slices/authSlice.js"],"names":["createSlice","createAsyncThunk","authService","initialState","status","token","user","username","attemptAuth","_username","password","twoFactorAuthToken","console","log","success","error","getAuthToken","authSlice","name","reducers","extraReducers","builder","addCase","pending","state","action","fulfilled","payload","reducer"],"mappings":"AAAA;;AACA;AACA,SACEA,WADF,EAEEC,gBAFF,QAGO,kBAHP;AAKA,OAAOC,WAAP,MAAwB,sBAAxB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,MAAM,EAAE,MADW;AAEnBC,EAAAA,KAAK,EAAE,IAFY;AAGnBC,EAAAA,IAAI,EAAE;AACJC,IAAAA,QAAQ,EAAE;AADN;AAHa,CAArB,C,CAQA;;AACA,OAAO,MAAMC,WAAW,GAAGP,gBAAgB,CAAC,kBAAD,EAAqB,OAAO;AAAEQ,EAAAA,SAAF;AAAaC,EAAAA,QAAb;AAAuBC,EAAAA;AAAvB,CAAP,KAAuD;AACrHC,EAAAA,OAAO,CAACC,GAAR,CAAa,4BAA2B;AAAEJ,IAAAA,SAAF;AAAaC,IAAAA,QAAb;AAAuBC,IAAAA;AAAvB,GAA4C,EAApF;AACA,QAAM;AACJG,IAAAA,OADI;AAEJC,IAAAA,KAFI;AAGJV,IAAAA,KAHI;AAIJE,IAAAA;AAJI,MAKF,MAAML,WAAW,CAACc,YAAZ,CAAyBP,SAAzB,EAAoCC,QAApC,EAA8CC,kBAA9C,CALV;;AAOA,MAAIG,OAAO,KAAK,KAAhB,EAAuB;AACrBF,IAAAA,OAAO,CAACC,GAAR,CAAa,wBAAuBE,KAAM,EAA1C;AACD;;AAED,SAAO;AACLV,IAAAA,KAAK,EAAE,IADF;AAELE,IAAAA,QAAQ,EAAE;AAFL,GAAP;AAID,CAjB0C,CAApC;AAmBP,OAAO,MAAMU,SAAS,GAAGjB,WAAW,CAAC;AACnCkB,EAAAA,IAAI,EAAE,MAD6B;AAEnCf,EAAAA,YAFmC;AAGnCgB,EAAAA,QAAQ,EAAE,EAHyB;AAKnCC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CACJC,OADH,CACWd,WAAW,CAACe,OADvB,EACgC,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC/CD,MAAAA,KAAK,CAACpB,MAAN,GAAe,SAAf;AACD,KAHH,EAIGkB,OAJH,CAIWd,WAAW,CAACkB,SAJvB,EAIkC,CAACF,KAAD,EAAQC,MAAR,KAAmB;AACjD,YAAM;AACJpB,QAAAA,KADI;AAEJE,QAAAA;AAFI,UAGFkB,MAAM,CAACE,OAHX;AAKAH,MAAAA,KAAK,CAACnB,KAAN,GAAcA,KAAd;AACAmB,MAAAA,KAAK,CAAClB,IAAN,CAAWC,QAAX,GAAsBA,QAAtB;AACAiB,MAAAA,KAAK,CAACpB,MAAN,GAAe,MAAf;AACD,KAbH;AAcD;AApBkC,CAAD,CAA7B,C,CAuBP;AAEA;AAEA;AACA;;AAEA,eAAea,SAAS,CAACW,OAAzB","sourcesContent":["/* eslint-disable no-unused-vars */\n/* eslint-disable no-param-reassign */\nimport {\n  createSlice,\n  createAsyncThunk,\n} from '@reduxjs/toolkit';\n\nimport authService from 'services/authService';\n\nconst initialState = {\n  status: 'idle',\n  token: null,\n  user: {\n    username: null,\n  },\n};\n\n// Thunk functions\nexport const attemptAuth = createAsyncThunk('auth/attemptAuth', async ({ _username, password, twoFactorAuthToken }) => {\n  console.log(`[authSlice] attemptAuth: ${{ _username, password, twoFactorAuthToken }}`);\n  const {\n    success,\n    error,\n    token,\n    username,\n  } = await authService.getAuthToken(_username, password, twoFactorAuthToken);\n\n  if (success === false) {\n    console.log(`failed to login user ${error}`);\n  }\n\n  return {\n    token: null,\n    username: null,\n  }\n});\n\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(attemptAuth.pending, (state, action) => {\n        state.status = 'loading';\n      })\n      .addCase(attemptAuth.fulfilled, (state, action) => {\n        const {\n          token,\n          username,\n        } = action.payload;\n\n        state.token = token;\n        state.user.username = username;\n        state.status = 'idle';\n      });\n  },\n});\n\n// const isAuthenticated = () => {\n\n// }\n\n// Action creators are generated for each case reducer function\n// export const { updateAuthState } = authSlice.actions;\n\nexport default authSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}