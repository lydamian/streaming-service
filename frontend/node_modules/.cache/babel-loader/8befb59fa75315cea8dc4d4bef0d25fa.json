{"ast":null,"code":"/* eslint-disable semi */\n\n/* eslint-disable no-param-reassign */\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport devHelpers from 'utils/devHelpers';\nimport applicantsService from 'services/applicants';\nconst initialState = {\n  applicantsData: [...devHelpers.getFakeApplicantsData({\n    num: 10\n  })]\n};\nexport const applicantsSlice = createSlice({\n  name: 'applicants',\n  initialState,\n  reducers: {\n    updateApplicantsData(state, action) {\n      const applicantsData = action.payload;\n      state.applicantsData = [...applicantsData];\n    }\n\n  },\n  extraReducers: builder => {\n    builder.addCase(applicants.pending, (state, action) => {\n      state.status = 'loading';\n    }).addCase(login.fulfilled, (state, action) => {\n      const {\n        isAuthenticated,\n        username\n      } = action.payload;\n      state.isAuthenticated = isAuthenticated;\n      state.user.username = username;\n      state.status = 'idle';\n    });\n  }\n});\nexport const fetchAllApplicants = createAsyncThunk('applicants/fetchAllApplicants', async () => {\n  const response = await applicantsService.getAllApplicants();\n  return response;\n}); // Action creators are generated for each case reducer function\n\nexport const {\n  updateApplicantsData\n} = applicantsSlice.actions;\nexport default applicantsSlice.reducer;","map":{"version":3,"sources":["/Users/damianly/Desktop/Raya/Raya-React-DGDash/react-dg-dash/src/features/applicants/applicantsSlice.js"],"names":["createSlice","createAsyncThunk","devHelpers","applicantsService","initialState","applicantsData","getFakeApplicantsData","num","applicantsSlice","name","reducers","updateApplicantsData","state","action","payload","extraReducers","builder","addCase","applicants","pending","status","login","fulfilled","isAuthenticated","username","user","fetchAllApplicants","response","getAllApplicants","actions","reducer"],"mappings":"AAAA;;AACA;AACA,SAASA,WAAT,EAAsBC,gBAAtB,QAA6C,kBAA7C;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,cAAc,EAAE,CACd,GAAGH,UAAU,CAACI,qBAAX,CAAiC;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAAjC,CADW;AADG,CAArB;AAMA,OAAO,MAAMC,eAAe,GAAGR,WAAW,CAAC;AACzCS,EAAAA,IAAI,EAAE,YADmC;AAEzCL,EAAAA,YAFyC;AAGzCM,EAAAA,QAAQ,EAAE;AACRC,IAAAA,oBAAoB,CAACC,KAAD,EAAQC,MAAR,EAAgB;AAClC,YAAMR,cAAc,GAAGQ,MAAM,CAACC,OAA9B;AACAF,MAAAA,KAAK,CAACP,cAAN,GAAuB,CACrB,GAAGA,cADkB,CAAvB;AAGD;;AANO,GAH+B;AAWzCU,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CACJC,OADH,CACWC,UAAU,CAACC,OADtB,EAC+B,CAACP,KAAD,EAAQC,MAAR,KAAmB;AAC9CD,MAAAA,KAAK,CAACQ,MAAN,GAAe,SAAf;AACD,KAHH,EAIGH,OAJH,CAIWI,KAAK,CAACC,SAJjB,EAI4B,CAACV,KAAD,EAAQC,MAAR,KAAmB;AAC3C,YAAM;AACJU,QAAAA,eADI;AAEJC,QAAAA;AAFI,UAGFX,MAAM,CAACC,OAHX;AAKAF,MAAAA,KAAK,CAACW,eAAN,GAAwBA,eAAxB;AACAX,MAAAA,KAAK,CAACa,IAAN,CAAWD,QAAX,GAAsBA,QAAtB;AACAZ,MAAAA,KAAK,CAACQ,MAAN,GAAe,MAAf;AACD,KAbH;AAcD;AA1BwC,CAAD,CAAnC;AA6BP,OAAO,MAAMM,kBAAkB,GAAGzB,gBAAgB,CAAC,+BAAD,EAAkC,YAAY;AAC9F,QAAM0B,QAAQ,GAAG,MAAMxB,iBAAiB,CAACyB,gBAAlB,EAAvB;AACA,SAAOD,QAAP;AACD,CAHiD,CAA3C,C,CAKP;;AACA,OAAO,MAAM;AAAEhB,EAAAA;AAAF,IAA2BH,eAAe,CAACqB,OAAjD;AAEP,eAAerB,eAAe,CAACsB,OAA/B","sourcesContent":["/* eslint-disable semi */\n/* eslint-disable no-param-reassign */\nimport { createSlice, createAsyncThunk} from '@reduxjs/toolkit';\nimport devHelpers from 'utils/devHelpers';\nimport applicantsService from 'services/applicants';\n\nconst initialState = {\n  applicantsData: [\n    ...devHelpers.getFakeApplicantsData({ num: 10 }),\n  ],\n};\n\nexport const applicantsSlice = createSlice({\n  name: 'applicants',\n  initialState,\n  reducers: {\n    updateApplicantsData(state, action) {\n      const applicantsData = action.payload;\n      state.applicantsData = [\n        ...applicantsData,\n      ];\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(applicants.pending, (state, action) => {\n        state.status = 'loading';\n      })\n      .addCase(login.fulfilled, (state, action) => {\n        const {\n          isAuthenticated,\n          username,\n        } = action.payload;\n\n        state.isAuthenticated = isAuthenticated;\n        state.user.username = username;\n        state.status = 'idle';\n      });\n  },\n});\n\nexport const fetchAllApplicants = createAsyncThunk('applicants/fetchAllApplicants', async () => {\n  const response = await applicantsService.getAllApplicants();\n  return response\n});\n\n// Action creators are generated for each case reducer function\nexport const { updateApplicantsData } = applicantsSlice.actions;\n\nexport default applicantsSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}