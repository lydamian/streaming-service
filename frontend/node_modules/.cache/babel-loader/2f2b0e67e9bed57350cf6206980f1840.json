{"ast":null,"code":"var _s = $RefreshSig$();\n\n/* eslint-disable no-undef */\n\n/* eslint-disable no-unused-vars */\n\n/* eslint-disable no-param-reassign */\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { useSelector, useDispatch } from 'react-redux';\nimport authService from 'services/authService';\nimport { addAlert } from 'state-management/slices/alertsSlice';\nconst initialState = {\n  status: 'idle',\n  isAuthenticated: false,\n  user: {\n    username: null\n  }\n}; // Thunk functions\n\nconst login = createAsyncThunk('auth/login', _s(async ({\n  username,\n  password,\n  twoFactorAuthToken\n}) => {\n  _s();\n\n  console.log(`[authSlice] login: ${{\n    username,\n    password,\n    twoFactorAuthToken\n  }}`);\n  const dispatch = useDispatch();\n  const {\n    success,\n    error,\n    token,\n    username: _username\n  } = await authService.getAuthToken(username, password, twoFactorAuthToken);\n  console.log('[authSlice] login: getAuthToken response received', {\n    success,\n    error,\n    token,\n    _username\n  });\n\n  if (success === false) {\n    console.log(`failed to login user ${error}`);\n    dispatch(addAlert({\n      message: 'Unsuccessful login attempt'\n    }));\n  }\n\n  if (success === true) {\n    localStorage.setItem('X-Raya-Token', token);\n    dispatch(addAlert({\n      message: 'Successfully logged in user'\n    }));\n  }\n\n  return {\n    isAuthenticated: success,\n    username: _username\n  };\n}, \"rgTLoBID190wEKCp9+G8W6F7A5M=\", false, function () {\n  return [useDispatch];\n}));\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    reset: {\n      reducer(state) {\n        Object.assign(state, initialState);\n      }\n\n    },\n    logout: {\n      reducer(state) {\n        Object.assign(state, initialState);\n        localStorage.removeItem('X-Raya-Token');\n      }\n\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(login.pending, (state, action) => {\n      state.status = 'loading';\n    }).addCase(login.fulfilled, (state, action) => {\n      const {\n        isAuthenticated,\n        username\n      } = action.payload;\n      state.isAuthenticated = isAuthenticated;\n      state.user.username = username;\n      state.status = 'idle';\n    });\n  }\n});\n\nconst isLoggedIn = state => state.auth.isAuthenticated;\n\nconst getStatus = state => state.auth.status;\n\nconst getAuthToken = () => {\n  const authToken = localStorage.get('X-Raya-Token');\n\n  if (authToken != null) {\n    return true;\n  }\n\n  return false;\n};\n\nexport { isLoggedIn, getStatus, getAuthToken, login }; // Action creators are generated for each case reducer function\n\nexport const {\n  reset,\n  logout\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"sources":["/Users/damianly/Desktop/Raya/Raya-React-DGDash/react-dg-dash/src/state-management/slices/authSlice.js"],"names":["createSlice","createAsyncThunk","useSelector","useDispatch","authService","addAlert","initialState","status","isAuthenticated","user","username","login","password","twoFactorAuthToken","console","log","dispatch","success","error","token","_username","getAuthToken","message","localStorage","setItem","authSlice","name","reducers","reset","reducer","state","Object","assign","logout","removeItem","extraReducers","builder","addCase","pending","action","fulfilled","payload","isLoggedIn","auth","getStatus","authToken","get","actions"],"mappings":";;AAAA;;AACA;;AACA;AACA,SACEA,WADF,EAEEC,gBAFF,QAGO,kBAHP;AAIA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AACA,SAASC,QAAT,QAAyB,qCAAzB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,MAAM,EAAE,MADW;AAEnBC,EAAAA,eAAe,EAAE,KAFE;AAGnBC,EAAAA,IAAI,EAAE;AACJC,IAAAA,QAAQ,EAAE;AADN;AAHa,CAArB,C,CAQA;;AACA,MAAMC,KAAK,GAAGV,gBAAgB,CAAC,YAAD,KAAe,OAAO;AAAES,EAAAA,QAAF;AAAYE,EAAAA,QAAZ;AAAsBC,EAAAA;AAAtB,CAAP,KAAsD;AAAA;;AACjGC,EAAAA,OAAO,CAACC,GAAR,CAAa,sBAAqB;AAAEL,IAAAA,QAAF;AAAYE,IAAAA,QAAZ;AAAsBC,IAAAA;AAAtB,GAA2C,EAA7E;AACA,QAAMG,QAAQ,GAAGb,WAAW,EAA5B;AACA,QAAM;AACJc,IAAAA,OADI;AAEJC,IAAAA,KAFI;AAGJC,IAAAA,KAHI;AAIJT,IAAAA,QAAQ,EAAEU;AAJN,MAKF,MAAMhB,WAAW,CAACiB,YAAZ,CAAyBX,QAAzB,EAAmCE,QAAnC,EAA6CC,kBAA7C,CALV;AAMAC,EAAAA,OAAO,CAACC,GAAR,CAAY,mDAAZ,EAAiE;AAC/DE,IAAAA,OAD+D;AACtDC,IAAAA,KADsD;AAC/CC,IAAAA,KAD+C;AACxCC,IAAAA;AADwC,GAAjE;;AAIA,MAAIH,OAAO,KAAK,KAAhB,EAAuB;AACrBH,IAAAA,OAAO,CAACC,GAAR,CAAa,wBAAuBG,KAAM,EAA1C;AACAF,IAAAA,QAAQ,CAACX,QAAQ,CAAC;AAChBiB,MAAAA,OAAO,EAAE;AADO,KAAD,CAAT,CAAR;AAGD;;AACD,MAAIL,OAAO,KAAK,IAAhB,EAAsB;AACpBM,IAAAA,YAAY,CAACC,OAAb,CAAqB,cAArB,EAAqCL,KAArC;AACAH,IAAAA,QAAQ,CAACX,QAAQ,CAAC;AAChBiB,MAAAA,OAAO,EAAE;AADO,KAAD,CAAT,CAAR;AAGD;;AAED,SAAO;AACLd,IAAAA,eAAe,EAAES,OADZ;AAELP,IAAAA,QAAQ,EAAEU;AAFL,GAAP;AAID,CA9B6B;AAAA,UAEXjB,WAFW;AAAA,GAA9B;AAgCA,MAAMsB,SAAS,GAAGzB,WAAW,CAAC;AAC5B0B,EAAAA,IAAI,EAAE,MADsB;AAE5BpB,EAAAA,YAF4B;AAG5BqB,EAAAA,QAAQ,EAAE;AACRC,IAAAA,KAAK,EAAE;AACLC,MAAAA,OAAO,CAACC,KAAD,EAAQ;AACbC,QAAAA,MAAM,CAACC,MAAP,CAAcF,KAAd,EAAqBxB,YAArB;AACD;;AAHI,KADC;AAMR2B,IAAAA,MAAM,EAAE;AACNJ,MAAAA,OAAO,CAACC,KAAD,EAAQ;AACbC,QAAAA,MAAM,CAACC,MAAP,CAAcF,KAAd,EAAqBxB,YAArB;AACAiB,QAAAA,YAAY,CAACW,UAAb,CAAwB,cAAxB;AACD;;AAJK;AANA,GAHkB;AAgB5BC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CACJC,OADH,CACW1B,KAAK,CAAC2B,OADjB,EAC0B,CAACR,KAAD,EAAQS,MAAR,KAAmB;AACzCT,MAAAA,KAAK,CAACvB,MAAN,GAAe,SAAf;AACD,KAHH,EAIG8B,OAJH,CAIW1B,KAAK,CAAC6B,SAJjB,EAI4B,CAACV,KAAD,EAAQS,MAAR,KAAmB;AAC3C,YAAM;AACJ/B,QAAAA,eADI;AAEJE,QAAAA;AAFI,UAGF6B,MAAM,CAACE,OAHX;AAKAX,MAAAA,KAAK,CAACtB,eAAN,GAAwBA,eAAxB;AACAsB,MAAAA,KAAK,CAACrB,IAAN,CAAWC,QAAX,GAAsBA,QAAtB;AACAoB,MAAAA,KAAK,CAACvB,MAAN,GAAe,MAAf;AACD,KAbH;AAcD;AA/B2B,CAAD,CAA7B;;AAkCA,MAAMmC,UAAU,GAAIZ,KAAD,IAAWA,KAAK,CAACa,IAAN,CAAWnC,eAAzC;;AACA,MAAMoC,SAAS,GAAId,KAAD,IAAWA,KAAK,CAACa,IAAN,CAAWpC,MAAxC;;AAEA,MAAMc,YAAY,GAAG,MAAM;AACzB,QAAMwB,SAAS,GAAGtB,YAAY,CAACuB,GAAb,CAAiB,cAAjB,CAAlB;;AACA,MAAID,SAAS,IAAI,IAAjB,EAAuB;AACrB,WAAO,IAAP;AACD;;AACD,SAAO,KAAP;AACD,CAND;;AAQA,SACEH,UADF,EAEEE,SAFF,EAGEvB,YAHF,EAIEV,KAJF,G,CAOA;;AACA,OAAO,MAAM;AACXiB,EAAAA,KADW;AAEXK,EAAAA;AAFW,IAGTR,SAAS,CAACsB,OAHP;AAKP,eAAetB,SAAS,CAACI,OAAzB","sourcesContent":["/* eslint-disable no-undef */\n/* eslint-disable no-unused-vars */\n/* eslint-disable no-param-reassign */\nimport {\n  createSlice,\n  createAsyncThunk,\n} from '@reduxjs/toolkit';\nimport { useSelector, useDispatch } from 'react-redux';\nimport authService from 'services/authService';\nimport { addAlert } from 'state-management/slices/alertsSlice';\n\nconst initialState = {\n  status: 'idle',\n  isAuthenticated: false,\n  user: {\n    username: null,\n  },\n};\n\n// Thunk functions\nconst login = createAsyncThunk('auth/login', async ({ username, password, twoFactorAuthToken }) => {\n  console.log(`[authSlice] login: ${{ username, password, twoFactorAuthToken }}`);\n  const dispatch = useDispatch();\n  const {\n    success,\n    error,\n    token,\n    username: _username,\n  } = await authService.getAuthToken(username, password, twoFactorAuthToken);\n  console.log('[authSlice] login: getAuthToken response received', {\n    success, error, token, _username,\n  });\n\n  if (success === false) {\n    console.log(`failed to login user ${error}`);\n    dispatch(addAlert({\n      message: 'Unsuccessful login attempt',\n    }));\n  }\n  if (success === true) {\n    localStorage.setItem('X-Raya-Token', token);\n    dispatch(addAlert({\n      message: 'Successfully logged in user',\n    }));\n  }\n\n  return {\n    isAuthenticated: success,\n    username: _username,\n  };\n});\n\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    reset: {\n      reducer(state) {\n        Object.assign(state, initialState);\n      },\n    },\n    logout: {\n      reducer(state) {\n        Object.assign(state, initialState);\n        localStorage.removeItem('X-Raya-Token');\n      },\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(login.pending, (state, action) => {\n        state.status = 'loading';\n      })\n      .addCase(login.fulfilled, (state, action) => {\n        const {\n          isAuthenticated,\n          username,\n        } = action.payload;\n\n        state.isAuthenticated = isAuthenticated;\n        state.user.username = username;\n        state.status = 'idle';\n      });\n  },\n});\n\nconst isLoggedIn = (state) => state.auth.isAuthenticated;\nconst getStatus = (state) => state.auth.status;\n\nconst getAuthToken = () => {\n  const authToken = localStorage.get('X-Raya-Token');\n  if (authToken != null) {\n    return true;\n  }\n  return false;\n};\n\nexport {\n  isLoggedIn,\n  getStatus,\n  getAuthToken,\n  login,\n};\n\n// Action creators are generated for each case reducer function\nexport const {\n  reset,\n  logout,\n} = authSlice.actions;\n\nexport default authSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}