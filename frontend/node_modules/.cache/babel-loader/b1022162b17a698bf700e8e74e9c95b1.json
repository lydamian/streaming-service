{"ast":null,"code":"import RayaAxiosClient from './rayaAxiosClient';\n/**\n * gets authentication token if username, password,\n * and twoFactorAuthToken is valid.\n *\n * @param {String} username\n * @param {String} password\n * @param {String} twoFactorAuthToken\n * @returns {{token: String, username: String }} Object\n}\n */\n\nconst getAuthToken = async (username, password, twoFactorAuthToken) => {\n  console.log('[authService] getAuthToken:');\n\n  try {\n    const response = await RayaAxiosClient.post('/api/admin/token', {\n      username,\n      password,\n      twofactor: twoFactorAuthToken\n    });\n    console.log('[authService] getAuthToken /api/admin/token response', JSON.stringify({ ...response.data\n    }));\n    return { ...response.data,\n      error: null,\n      success: true\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: error.message,\n      token: null\n    };\n  }\n};\n\nexport default {\n  getAuthToken\n};","map":{"version":3,"sources":["/Users/damianly/Desktop/Raya/Raya-React-DGDash/react-dg-dash/src/services/auth.js"],"names":["RayaAxiosClient","getAuthToken","username","password","twoFactorAuthToken","console","log","response","post","twofactor","JSON","stringify","data","error","success","message","token"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,mBAA5B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,YAAY,GAAG,OAAOC,QAAP,EAAiBC,QAAjB,EAA2BC,kBAA3B,KAAkD;AACrEC,EAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;;AACA,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMP,eAAe,CAACQ,IAAhB,CAAqB,kBAArB,EAAyC;AAC9DN,MAAAA,QAD8D;AAE9DC,MAAAA,QAF8D;AAG9DM,MAAAA,SAAS,EAAEL;AAHmD,KAAzC,CAAvB;AAKAC,IAAAA,OAAO,CAACC,GAAR,CAAY,sDAAZ,EAAoEI,IAAI,CAACC,SAAL,CAAe,EAAE,GAAGJ,QAAQ,CAACK;AAAd,KAAf,CAApE;AACA,WAAO,EACL,GAAGL,QAAQ,CAACK,IADP;AAELC,MAAAA,KAAK,EAAE,IAFF;AAGLC,MAAAA,OAAO,EAAE;AAHJ,KAAP;AAKD,GAZD,CAYE,OAAOD,KAAP,EAAc;AACd,WAAO;AACLC,MAAAA,OAAO,EAAE,KADJ;AAELD,MAAAA,KAAK,EAAEA,KAAK,CAACE,OAFR;AAGLC,MAAAA,KAAK,EAAE;AAHF,KAAP;AAKD;AACF,CArBD;;AAuBA,eAAe;AACbf,EAAAA;AADa,CAAf","sourcesContent":["import RayaAxiosClient from './rayaAxiosClient';\n\n/**\n * gets authentication token if username, password,\n * and twoFactorAuthToken is valid.\n *\n * @param {String} username\n * @param {String} password\n * @param {String} twoFactorAuthToken\n * @returns {{token: String, username: String }} Object\n}\n */\nconst getAuthToken = async (username, password, twoFactorAuthToken) => {\n  console.log('[authService] getAuthToken:');\n  try {\n    const response = await RayaAxiosClient.post('/api/admin/token', {\n      username,\n      password,\n      twofactor: twoFactorAuthToken,\n    });\n    console.log('[authService] getAuthToken /api/admin/token response', JSON.stringify({ ...response.data }));\n    return {\n      ...response.data,\n      error: null,\n      success: true,\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: error.message,\n      token: null,\n    };\n  }\n};\n\nexport default {\n  getAuthToken,\n};\n"]},"metadata":{},"sourceType":"module"}