{"ast":null,"code":"/* eslint-disable no-unused-vars */\n\n/* eslint-disable no-param-reassign */\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport authService from 'services/authService';\nconst initialState = {\n  status: 'idle',\n  token: '',\n  user: {}\n}; // Thunk functions\n\nexport const attemptAuth = createAsyncThunk('auth/attemptAuth', async (username, password, twoFactorAuthToken) => {\n  const response = await authService.getAuthToken(username, password, twoFactorAuthToken);\n  return response.data;\n});\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(attemptAuth.pending, (state, action) => {\n      state.status = 'loading';\n    }).addCase(attemptAuth.fulfilled, (state, action) => {\n      const {\n        success,\n        error,\n        token,\n        username\n      } = action.payload;\n\n      if (success === false) {\n        console.log(`failed to login user ${error}`);\n        return;\n      }\n\n      state.token = token;\n      state.user.username = username;\n      state.status = 'idle';\n    });\n  }\n}); // const isAuthenticated = () => {\n// }\n// Action creators are generated for each case reducer function\n// export const { updateAuthState } = authSlice.actions;\n\nexport default authSlice.reducer;","map":{"version":3,"sources":["/Users/damianly/Desktop/Raya/Raya-React-DGDash/react-dg-dash/src/state-management/slices/authSlice.js"],"names":["createSlice","createAsyncThunk","authService","initialState","status","token","user","attemptAuth","username","password","twoFactorAuthToken","response","getAuthToken","data","authSlice","name","reducers","extraReducers","builder","addCase","pending","state","action","fulfilled","success","error","payload","console","log","reducer"],"mappings":"AAAA;;AACA;AACA,SACEA,WADF,EAEEC,gBAFF,QAGO,kBAHP;AAKA,OAAOC,WAAP,MAAwB,sBAAxB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,MAAM,EAAE,MADW;AAEnBC,EAAAA,KAAK,EAAE,EAFY;AAGnBC,EAAAA,IAAI,EAAE;AAHa,CAArB,C,CAMA;;AACA,OAAO,MAAMC,WAAW,GAAGN,gBAAgB,CAAC,kBAAD,EAAqB,OAAOO,QAAP,EAAiBC,QAAjB,EAA2BC,kBAA3B,KAAkD;AAChH,QAAMC,QAAQ,GAAG,MAAMT,WAAW,CAACU,YAAZ,CAAyBJ,QAAzB,EAAmCC,QAAnC,EAA6CC,kBAA7C,CAAvB;AACA,SAAOC,QAAQ,CAACE,IAAhB;AACD,CAH0C,CAApC;AAKP,OAAO,MAAMC,SAAS,GAAGd,WAAW,CAAC;AACnCe,EAAAA,IAAI,EAAE,MAD6B;AAEnCZ,EAAAA,YAFmC;AAGnCa,EAAAA,QAAQ,EAAE,EAHyB;AAKnCC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CACJC,OADH,CACWZ,WAAW,CAACa,OADvB,EACgC,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC/CD,MAAAA,KAAK,CAACjB,MAAN,GAAe,SAAf;AACD,KAHH,EAIGe,OAJH,CAIWZ,WAAW,CAACgB,SAJvB,EAIkC,CAACF,KAAD,EAAQC,MAAR,KAAmB;AACjD,YAAM;AACJE,QAAAA,OADI;AAEJC,QAAAA,KAFI;AAGJpB,QAAAA,KAHI;AAIJG,QAAAA;AAJI,UAKFc,MAAM,CAACI,OALX;;AAOA,UAAIF,OAAO,KAAK,KAAhB,EAAuB;AACrBG,QAAAA,OAAO,CAACC,GAAR,CAAa,wBAAuBH,KAAM,EAA1C;AACA;AACD;;AACDJ,MAAAA,KAAK,CAAChB,KAAN,GAAcA,KAAd;AACAgB,MAAAA,KAAK,CAACf,IAAN,CAAWE,QAAX,GAAsBA,QAAtB;AACAa,MAAAA,KAAK,CAACjB,MAAN,GAAe,MAAf;AACD,KAnBH;AAoBD;AA1BkC,CAAD,CAA7B,C,CA6BP;AAEA;AAEA;AACA;;AAEA,eAAeU,SAAS,CAACe,OAAzB","sourcesContent":["/* eslint-disable no-unused-vars */\n/* eslint-disable no-param-reassign */\nimport {\n  createSlice,\n  createAsyncThunk,\n} from '@reduxjs/toolkit';\n\nimport authService from 'services/authService';\n\nconst initialState = {\n  status: 'idle',\n  token: '',\n  user: {},\n};\n\n// Thunk functions\nexport const attemptAuth = createAsyncThunk('auth/attemptAuth', async (username, password, twoFactorAuthToken) => {\n  const response = await authService.getAuthToken(username, password, twoFactorAuthToken);\n  return response.data;\n});\n\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(attemptAuth.pending, (state, action) => {\n        state.status = 'loading';\n      })\n      .addCase(attemptAuth.fulfilled, (state, action) => {\n        const {\n          success,\n          error,\n          token,\n          username,\n        } = action.payload;\n\n        if (success === false) {\n          console.log(`failed to login user ${error}`);\n          return;\n        }\n        state.token = token;\n        state.user.username = username;\n        state.status = 'idle';\n      });\n  },\n});\n\n// const isAuthenticated = () => {\n\n// }\n\n// Action creators are generated for each case reducer function\n// export const { updateAuthState } = authSlice.actions;\n\nexport default authSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}